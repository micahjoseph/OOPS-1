CLASS


//DYNAMIC ARRAY->EXTEND THE ARRAY ACCORDING TO THE USER'S NEED

class dynamicArray{
	int *data;
	int nextIndex;
	int capacity;
	
	
	public:
		dynamicArray()
		{
			data=new int[5];
			nextIndex=0;
			capacity=5;
		}
		
		dynamicArray(dynamicArray const &d)//DEEP COPY CONSTRUCTOR
		{
			//this->data=d.data;
			this->data=new int[d.capacity];
			for(int i=0;i<nextIndex;i++)
			{
				this->data[i]=d.data[i];
			}
			this->nextIndex=d.nextIndex;
			this->capacity=d.capacity;
		}
		void operator=(dynamicArray const &d)
		{
			this->data=new int[d.capacity];
			for(int i=0;i<nextIndex;i++)
			{
				this->data[i]=d.data[i];
			}
			this->nextIndex=d.nextIndex;
			this->capacity=d.capacity;
		}
		void add(int element)
		{
			if(nextIndex==capacity)
			{
				int *newData=new int[2*capacity];
				for(int i=0;i<capacity;i++)
				{
					newData[i]=data[i];
				 } 
				 delete [] data;
				 data=newData;
				 capacity *=capacity;
				
			}
			data[nextIndex]=element;
			nextIndex++;
		}
		
		int getElement(int i)
		{
			if(i<nextIndex)
			{
				
				return data[i];
			}
			else
			{
				return -1;
			}
		}
		void add(int i, int element)
		{
			if(i<nextIndex)
			{
				data[i]=element;
			}
			else if(i==nextIndex)
			{
				add(element);
			}
			else
			{
				return ;
			}
		}
		void print() const
		{
			for(int i=0;i<nextIndex;i++)
			{
				cout<<data[i]<<" ";
			}
			cout<<endl;
		}
};






OBJECT



#include<iostream>
using namespace std;
#include"dynamic_array_class.cpp"

int main()
{
	dynamicArray d1;
	
	d1.add(10);
	d1.add(20);
	d1.add(30);
	d1.add(40);
	d1.add(50);
	
	d1.print();
	
	
	
	dynamicArray d2(d1);
	d1.add(0,100);
	d2.print();
}
