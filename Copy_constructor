COPY CONSTRUCTOR CLASS

class Student
{
	public:
	
	int roll_number;
	private:
	int age;
	
	
	public:
		~Student(){
			cout<<"Destructor called !"<<endl;
		}
	public:
	//DEFAULT CONSTRUCTOR
	Student()
	{
	  cout<<"Default Constructor called"<<endl;
		
	}
	

	Student(int r,int a)
	{
		//cout<<"Constructor 3 called"<<endl;
		cout<<" Copy Constructor  called"<<endl;
		roll_number=r;
		age=a;
		
		
	}
	//this->holds the address of current element
	Student(int roll_number)
	{
		cout<<"Constructor 4 called"<<endl;
		this->roll_number=roll_number;
		
		
		
	}
	
	void display()
	{
		cout<<roll_number<<" "<<age;
	}
	
	
	int getAge()
	{
		return age;
	}
	void setAge(int a,int password)
	{
		if(password!=123)
		{
			return;
		}
		
		if(a<0)
		{
			return;
		}
		
		age=a;
	}
};



COPY CONSTRUCTOR OBJECT

#include<iostream>
using namespace std;
#include "copy_constructor_class.cpp"

int main()
{
	Student s1;
	//s1.display();
	
	Student s2;
	//s2.display();
	
	Student *s3=new Student;
	//s3->display();
	
	
	//cout<<"Parameterised constructor called"<<endl;
	//Student s4(23);
	
	/*s4.display();
	
	
	Student s5(123,456);
	s5.display();
	
	Student s6(178);
	s6.display();*/
	Student s4(24,150);
	
	Student s5(s4);
	
	s5.display();
	cout<<endl;
	
	
	Student *s6= new Student(1234,5678);
	s6->display();
	cout<<endl;
	
	Student s7(*s6);
	s7.display();
	cout<<endl;
	
	Student *s8=new Student(*s6);
	s8->display();
	cout<<endl;
	
	
	Student *s9=new Student(s1);
	s9->display();
}




