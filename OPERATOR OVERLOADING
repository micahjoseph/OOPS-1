CLASS


class Fraction {
	private :

		int numerator;
		int denominator;

	public :

		Fraction() {
			
		}

		Fraction(int numerator, int denominator) {
			this -> numerator = numerator;
			this -> denominator = denominator;
		}

		int getNumerator() const {
			return numerator;
		}
		
		int getDenominator() const {
			return denominator;
		}

		void setNumerator(int n) {
			numerator = n;
		}

		void setDenominator(int d) {
			denominator = d;
		}

		void print() const {
			cout << this -> numerator << " / " << denominator << endl;
		}

		void simplify() {
			int gcd = 1;
			int j = min(this -> numerator, this -> denominator);
			for(int i = 1; i <= j; i++) {
				if(this -> numerator % i == 0 && this -> denominator % i == 0) {
					gcd = i;
				}
			}
			this -> numerator = this -> numerator / gcd;
			this -> denominator = this -> denominator / gcd;
		}

		Fraction add(Fraction const &f2) {
			int lcm = denominator * f2.denominator;
			int x = lcm / denominator;
			int y = lcm / f2.denominator;

			int num = x * numerator + (y * f2.numerator);

			//numerator = num;
			//denominator = lcm;
			Fraction fnew(num,lcm);
			fnew.simplify();
			return fnew;	
		}

		Fraction operator+(Fraction const &f2) const {
			int lcm = denominator * f2.denominator;
			int x = lcm / denominator;
			int y = lcm / f2.denominator;

			int num = x * numerator + (y * f2.numerator);

			//numerator = num;
			//denominator = lcm;
			Fraction fnew(num,lcm);
			fnew.simplify();
			return fnew;	
		}

		void multiply(Fraction const &f2) {
			numerator = numerator * f2.numerator;
			denominator = denominator * f2.denominator;
			
			simplify();
		}
		Fraction operator*(Fraction const &f2) const { 
			int n = numerator * f2.numerator;
			int d = denominator * f2.denominator;
			
			Fraction fnew(n,d);
			
			fnew.simplify();
			return fnew;
		}
		bool operator==(Fraction f2)
		{
			return (numerator==f2.numerator&&denominator==f2.denominator);
		}
		Fraction&  operator++()
		{
			numerator=numerator+denominator;
			simplify();
			return *this;
		}
		
		
		Fraction operator++(int)//post increment
		{
			Fraction fnew(numerator,denominator);
			numerator=numerator+denominator;
			simplify();
			return fnew;
		}
		
		Fraction operator+=(Fraction const &f2)
		{
			 
		}

};






OBJECT


#include <iostream>
using namespace std;
#include "operator_overloading_1.cpp"

int main() {
	Fraction f1(10, 2);
	Fraction f2(15, 4);

	/*Fraction f3=f1.add(f2);
	Fraction f4=f1+f2;
	Fraction f5=f1*f2;
	f1.print();
	f3.print();
	f4.print();
	f5.print();
	if(f1==f2)
	{
		cout<<"equal";
	}
	else
	{
		cout<<"Not equal";
	}*/
	f1.print();
	Fraction f3= ++f1;
	Fraction f4= ++(++f1);
	f3.print();
	f4.print();

}

